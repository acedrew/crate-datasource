{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAO,O;;AACK,c;;AACA,kB;;AACA,sB;;;;;;;;;;;;;;;;;;;;;iCAEC,e;AAEX,iCAAY,gBAAZ,EAA8B,EAA9B,EAAkC,UAAlC,EAA8C;AAAA;;AAC5C,eAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,eAAK,GAAL,GAAW,iBAAiB,GAA5B;AACA,eAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,eAAK,EAAL,GAAU,EAAV;AACA,eAAK,UAAL,GAAkB,UAAlB;AACD;;;;;;;gCAGK,O,EAAS;AAAA;;AACb,gBAAI,WAAW,KAAK,IAAL,CAAU,SAAS,KAAT,CAAe,QAAQ,KAAR,CAAc,IAA7B,CAAV,CAAf;AACA,gBAAI,SAAS,KAAK,IAAL,CAAU,SAAS,KAAT,CAAe,QAAQ,KAAR,CAAc,EAA7B,CAAV,CAAb;;AAEA,gBAAI,UAAU,EAAE,GAAF,CAAM,QAAQ,OAAd,EAAuB,kBAAU;AAC7C,kBAAI,OAAO,IAAP,IAAe,OAAO,KAAP,KAAiB,EAApC,EAAwC;AACtC,uBAAO,EAAP;AACD,eAFD,MAEO;AACL,uBAAO,MAAK,UAAL,CAAgB,aAAa,UAAb,CAAwB,MAAxB,EAAgC,QAAhC,EAA0C,MAA1C,CAAhB,EACJ,IADI,CACC,oBAAY;AAChB,yBAAO,iBAAiB,eAAjB,CAAiC,MAAjC,EAAyC,QAAzC,CAAP;AACD,iBAHI,CAAP;AAID;AACF,aATa,CAAd;AAUA,mBAAO,KAAK,EAAL,CAAQ,GAAR,CAAY,EAAE,OAAF,CAAU,OAAV,CAAZ,EAAgC,IAAhC,CAAqC,kBAAU;AACpD,qBAAO;AACL,sBAAM;AADD,eAAP;AAGD,aAJM,CAAP;AAKD;;;2CAIgB;AACf,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,mBAAK,KAAK,GAAL,GAAW,GADuB;AAEvC,sBAAQ;AAF+B,aAAlC,EAGJ,IAHI,CAGC,oBAAY;AAClB,kBAAI,SAAS,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,oBAAI,eAAe,SAAS,IAAT,CAAc,YAAjC;AACA,oBAAI,gBAAgB,SAAS,IAAT,CAAc,OAAd,CAAsB,MAA1C;AACA,uBAAO;AACL,0BAAQ,SADH;AAEL,2BAAS,cAAc,YAAd,GAA6B,aAA7B,GAA6C,aAFjD;AAGL,yBAAO;AAHF,iBAAP;AAKD;AACF,aAbM,CAAP;AAcD;;;qCAEU,K,EAAO;AAChB,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,mBAAK,KAAK,GAAL,GAAW,OADuB;AAEvC,oBAAM;AACJ,wBAAQ;AADJ,eAFiC;AAKvC,sBAAQ,MAL+B;AAMvC,uBAAS;AACP,gCAAgB;AADT;AAN8B,aAAlC,CAAP;AAUD","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport * as queryBuilder from './query_builder';\nimport * as response_handler from './response_handler';\n\nexport class CrateDatasource {\n\n  constructor(instanceSettings, $q, backendSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    var timeFrom = Math.ceil(dateMath.parse(options.range.from));\n    var timeTo = Math.ceil(dateMath.parse(options.range.to));\n\n    var queries = _.map(options.targets, target => {\n      if (target.hide || target.query === '') {\n        return [];\n      } else {\n        return this._sql_query(queryBuilder.buildQuery(target, timeFrom, timeTo))\n          .then(response => {\n            return response_handler.handle_response(target, response);\n          });\n      }\n    });\n    return this.$q.all(_.flatten(queries)).then(result => {\n      return {\n        data: result\n      };\n    });\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        var cluster_name = response.data.cluster_name;\n        var crate_version = response.data.version.number;\n        return {\n          status: \"success\",\n          message: \"Cluster: \" + cluster_name + \", version: \" + crate_version,\n          title: \"Success\"\n        };\n      }\n    });\n  }\n\n  _sql_query(query) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/_sql',\n      data: {\n        \"stmt\": query\n      },\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n}\n"]}